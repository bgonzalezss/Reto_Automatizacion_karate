{
	"info": {
		"_postman_id": "577bd833-984f-4fc1-ada4-4311b693e004",
		"name": "Books-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45665011"
	},
	"item": [
		{
			"name": "status-api-ok",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlBase}}/{{status}}",
					"host": [
						"{{urlBase}}"
					],
					"path": [
						"{{status}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "list of all books",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlBase}}/{{books}}",
					"host": [
						"{{urlBase}}"
					],
					"path": [
						"{{books}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "accessToken",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"clientName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
							"pm.environment.set(\"clientEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json(); \r",
							"let accessToken = response.accessToken; \r",
							"console.log(\"El token obtenido es: \" + accessToken);\r",
							"pm.environment.set(\"accessToken\", accessToken);\r",
							"\r",
							"//Validación de status 201 created.\r",
							"pm.test(\"El status code es 201 Created\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//Validación del campo accessToken existente\r",
							"pm.test(\"Response tiene campo accessToken\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
							"});\r",
							"\r",
							"//Validación que el accessToken no sea vacio\r",
							"pm.test(\"accessToken no es vacio\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.accessToken).to.be.a(\"string\").and.not.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{clientName}}\",\r\n   \"clientEmail\": \"{{clientEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlBase}}/{{api-client}}",
					"host": [
						"{{urlBase}}"
					],
					"path": [
						"{{api-client}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "submit an order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let bookId = Math.floor(Math.random() * 6); // entre 0 y 6\r",
							"pm.environment.set(\"bookId\", bookId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"let orderId = response.orderId;\r",
							"pm.environment.set(\"orderId\", orderId);\r",
							"console.log(\"El orderId de la solicitud es: \"+orderId)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": \"{{clientName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlBase}}/{{orders}}",
					"host": [
						"{{urlBase}}"
					],
					"path": [
						"{{orders}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "orderId",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlBase}}/{{orders}}/{{orderId}}",
					"host": [
						"{{urlBase}}"
					],
					"path": [
						"{{orders}}",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update an orderId",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"newClientName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"{{newClientName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlBase}}/{{orders}}/{{orderId}}",
					"host": [
						"{{urlBase}}"
					],
					"path": [
						"{{orders}}",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "all orders",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlBase}}/{{orders}}",
					"host": [
						"{{urlBase}}"
					],
					"path": [
						"{{orders}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "book by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Script para la validación de la estructura \r",
							"let jsonResponse = pm.response.json();\r",
							"\r",
							"let schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": { \"type\": \"number\" },\r",
							"    \"name\": { \"type\": \"string\" },\r",
							"    \"author\": { \"type\": \"string\" },\r",
							"    \"isbn\": { \"type\": \"string\" },\r",
							"    \"type\": { \"type\": \"string\" },\r",
							"    \"price\": { \"type\": \"number\" },\r",
							"    \"current-stock\": { \"type\": \"number\" },\r",
							"    \"available\": { \"type\": \"boolean\" }\r",
							"  },\r",
							"  \"required\": [\"id\", \"name\", \"author\", \"isbn\", \"type\", \"price\", \"current-stock\", \"available\"]\r",
							"};\r",
							"\r",
							"console.log(schema)\r",
							"pm.test(\"Validate response schema\", () => {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlBase}}/{{books}}/{{bookId}}",
					"host": [
						"{{urlBase}}"
					],
					"path": [
						"{{books}}",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let status = pm.response.code;\r",
							"let statusDescription =pm.status;\r",
							"console.log(\"La eliminación de la orden fue: \"+status+\" \"+statusDescription)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{urlBase}}/{{orders}}/{{orderId}}",
					"host": [
						"{{urlBase}}"
					],
					"path": [
						"{{orders}}",
						"{{orderId}}"
					]
				}
			},
			"response": []
		}
	]
}